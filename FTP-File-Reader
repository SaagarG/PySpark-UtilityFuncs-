def read_file_from_ftp(spark, ftp_server, file_path, file_format='csv', sep='\t', username=None, password=None):
    # Define FTP URL
    ftp_url = f"ftp://{username}:{password}@{ftp_server}/{file_path}"

    # Read file based on format
    if file_format.lower() == 'csv':
        df = spark.read.csv(ftp_url, header=True, inferSchema=True)
    elif file_format.lower() == 'tsv' or file_format.lower() == 'tab':
        df = spark.read.csv(ftp_url, sep=sep, header=True, inferSchema=True)
    else:
        raise ValueError("Unsupported file format. Supported formats: 'csv', 'tsv' or 'tab'.")

    return df
------------------------------------------------------------------------------------------------------------------------------
%livy2.pyspark

try :
     spark = SparkSession.builder.appName("ReadFileFromFTP").getOrCreate()

     ds = read_file_from_ftp(spark, "tbl_Lookup_Months.csv")
     ds.show()

except Exception as e :
     print("An Error occured:", str(e))
     
finally :
     spark.stop()

----------------------------------

with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
    tmp_file.write(data)
    tmp_file_path = tmp_file.name

-----------------------------------

file_path = f"/HedgingTbls/TBL_2_Archive_SAPExtract.txt"
ftp = ftplib.FTP(host="emft-xxxxxxx.com", user="yyyy", passwd="zzzz")  # setting up the ftp connection
file = BytesIO()

ftp.retrbinary('RETR ' + file_path, file.write, 1024)
file.seek(0)

with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
     tmp_file.write(file)
     tmp_file_path = tmp_file.name


# Read file based on format
df = spark.read.csv(tmp_file_path, sep="\t", \
                    header=True, \
                    encoding = "UTF-8", \
                    inferSchema = True)
                    #na_values = na_values)
                    
df.printSchema()
-----------------------------------------

 Archive.select(to_date(col('Sale_Dt'), 'd/M/yyyy').alias('Sale_Dt').cast('date'))

----------------------------------------------

df_converted = df.select(
    *[to_date(col(col_name), date_format).alias(col_name).cast('date') if col_name in columns_to_convert else col(col_name) for col_name in df.columns]
)

----------------------------------------------

new_columns = [col.replace(' ', '_') for col in df.columns]
df_renamed = df
for old_col, new_col in zip(df.columns, new_columns):
    df_renamed = df_renamed.withColumnRenamed(old_col, new_col)


--------------------------------------------------

import xml.etree.ElementTree as ET

# Step 1: Parse the SOAP Message File and Register Namespaces
soap_file = 'soap_message.xml'
tree = ET.parse(soap_file)
root = tree.getroot()

# Register namespaces
namespaces = {
    'soapenv': 'http://schemas.xmlsoap.org/soap/envelope/',
    'con': 'http://example.com'
}
for prefix, uri in namespaces.items():
    ET.register_namespace(prefix, uri)

# Step 2: Update the Values under Selected Tags
for elem in root.findall('.//con:Element1', namespaces):
    elem.text = 'NewValue1'

for elem in root.findall('.//con:Element2', namespaces):
    elem.text = 'NewValue2'

# Step 3: Save the Updated SOAP Message File
output_soap_file = 'updated_soap_message.xml'
tree.write(output_soap_file, xml_declaration=True, encoding='utf-8', method="xml")

print(f"SOAP message file '{output_soap_file}' has been updated.")

--------------

<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:con="http://example.com">
    <soapenv:Header/>
    <soapenv:Body>
        <con:CreateAgreement>
            <con:obj>
                <con:Element1>OldValue1</con:Element1>
                <con:Element2>OldValue2</con:Element2>
            </con:obj>
        </con:CreateAgreement>


<ItemGroup>
  <None Include="Reference.svcmap">
    <Generator>MSBuild:Compile</Generator>
    <LastGenOutput>Reference.cs</LastGenOutput>
  </None>
</ItemGroup>
    </soapenv:Body>
</soapenv:Envelope>
